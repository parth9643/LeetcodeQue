class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        stack<pair<int,int>> st1, st2;
        int len = arr.size();
        vector<int> left(len);
        vector<int> right(len);

        // Traverse left side
        for (int i = 0; i < arr.size(); i++) {
            left[i] = i + 1;
        }

        // Traverse right side
        for (int i = 0; i < arr.size(); i++) {
            right[i] = len - i;
        }

        int ans = 0, mod = 1e9 + 7;

        // Transverse the array
        for (int j = 0; j < arr.size(); j++) {

            //left side smallest elment
            while (!st1.empty() && arr[j] < st1.top().first) {
                st1.pop();
            }

            if(st1.empty()){
                left[j]=j+1;
            }
            else{
                left[j]=j-st1.top().second;
            }

            st1.push({arr[j], j});

            //right side sai sabse chota element
            while (!st2.empty() && arr[j] < st2.top().first) {
                auto temp = st2.top();
                st2.pop();
                right[temp.second] = j - temp.second;
            }
            st2.push({arr[j], j});
        }

        for (int i = 0; i < arr.size(); i++) {
            //static_cast long to int mai convert kai liye
            ans = (ans + static_cast<long long>(arr[i]) * left[i] * right[i]) % mod;
        }
        return ans;
    }
};
